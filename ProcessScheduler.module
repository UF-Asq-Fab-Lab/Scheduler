<?php
/**
 * ProcessWire Scheduler Process
 *
 * Developed for the AÂ² Fab Lab at the University of Florida.
 * Allows for the listing and management of equipment use reservations.
 * Provides a front end interface for users to reserve equipment.
 *
 * Thomas Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 * 
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 *
 */

class ProcessScheduler extends Process implements ConfigurableModule {

	static public function getModuleInfo(){
    //requires ProcessEvents and ProcessEquipment
    return array(
      'title' => 'Scheduler',
      'version' => 100,
      'author' => 'Thomas Storey',
      'summary' => 'Parent process for Events and Equipment. Provides frontend interface for managing equipment reservation.',
      'href' => 'https://github.com/UF-Asq-Fab-Lab',
      'requires' => array('ProcessEvent>=1.0.0', 'ProcessEquipment>=1.0.0'),
      'icon' => 'clock-o',
      'singular' => true,
      'autoload' => true,
      'useNavJSON' => true,
    );
	}

  protected $plist = null;
  protected $eventTemplateID = 0;
  protected $equipmentTemplateID = 0;

  public static function getDefaultConfig(){
    return array(
      "email" => "managerEmail@managerHost.com",
      "scheduler_format" => "M-D-YYYY",
      "scheduler_allowed_hours_per_week" => 6,
      "scheduler_page" => '/schedule',
      "scheduler_filepath" => '/var/www/html/ProcessWire-dev/modules/ProcessScheduler/Scheduler',
      "event_fields" => array(
        'title' => 'FieldtypeText',
        'start_time' => 'FieldtypeDatetime',
        'end_time' => 'FieldtypeDatetime',
        'username' => 'FieldtypeText',
        'equipment_name' => 'FieldtypeText',
        'color' => 'FieldtypeText',
        'email' => 'FieldtypeEmail'
      ),
      "equipment_fields" => array(
        'title' => 'FieldtypeText',
        'equipment_name' => 'FieldtypeText',
        'color' => 'FieldtypeText',
        'available' => 'FieldtypeCheckbox',
        'equipment_info' => 'FieldtypeTextarea'
      ),
    );
  }

  public function init() {
    if(isset($_SERVER['REQUEST_URI']) && 
      strpos($_SERVER['REQUEST_URI'], $this->scheduler_page) !== false) {
      $this->addHookAfter('TemplateFile::render', $this, 'renderScheduler');
    }
  }

  protected function renderScheduler(HookEvent $event){
    $template = $event->object;
    $options = $template->options;
    $defaults = self::getDefaultConfig();

    $eventPages = $this->wire('pages')->find("template=event");
    $equipmentPages = $this->wire('pages')->find("template=equipment, available=1");

    $json = $this->pagesToJSON($eventPages, "events") . "\n" . $this->pagesToJSON($equipmentPages, "equipment");

    if(is_array($options) && array_key_exists('pageStack', $options)){
      ob_start();
      require($defaults['scheduler_filepath'].".php");
      $output = "\n" . ob_get_contents() . "\n";
      ob_end_clean();
      //TO DO: Add stylesheet to output
      $output = "<script type='text/javascript'>" . $json . "</script>" . $output;
      $event->return = str_ireplace("[scheduler]", $output, $event->return);
    }
  }

  private function pagesToJSON($pageArray, $varName){
    $out = "var " . $varName . " = [ \n";
    foreach ($pageArray as $key => $value) {
      $out .= "{ \n";
      $properties = $value->getIterator();
      foreach ($properties as $propKey => $propValue) {
        $out .= $propKey . " : " . $propValue . ",\n";
      }
      $out = rtrim($out, ",\n");
      $out .= "\n},\n";
    }
    $out = rtrim($out, ",\n");
    $out .= "];";
    return $out;
  }

  private function getTemplate($fieldsArray, $type){
    $t = $this->templates->get("name=".$type);
    if(!$t->id){
        $t = new Template();
        $t->name = $type;
        $t->tags = "scheduler";
        $t->noChildren = 0;
        $t->noParents = 0;
        $t->fieldgroup = $this->getFieldgroup($fieldsArray, $type);
        $t->save();
    }
    return $t;
  }

  private function getFieldgroup($fieldsArray, $type){
    $fg = $this->fieldgroups->get("name=".$type);
    if(!$fg->id){
        $fg = new Fieldgroup();
        $fg->name = $type;
        foreach ($fieldsArray as $name => $kind) {
            $fg->append($this->getField($name, $kind));
        }
        $fg->save();
    }
    
    return $fg;
  }

  private function getField($name, $type){
    $f = $this->fields->get("name=$name");
    if(!$f->id){
        $f = new Field();
        $f->name = $name;
        $f->type = $type;
        $f->label = ucwords(str_replace("_", " ", $name));
        $f->tags = "scheduler";
        $f->save();
    }
    return $f;
  }

  private function getSchedulerPage(){
    $p = $this->wire('pages')->get("name=scheduler");
    if(!$p->id){
      $p = new Page();
      $p->template = "admin";
      $p->name = "scheduler";
      $p->title = "Scheduler";
      $p->process = $this->wire('modules')->get('ProcessList');
      $p->parent = $this->wire('pages')->get($this->wire('config')->adminRootPageID);
      $p->save();
    }
    return $p->id;
  }

  private function getProcessPage($type, $parent){
    $p = $this->wire('pages')->get("name=".$type);
    if(!$p->id){
      $p = new Page();
      $p->template = "admin";
      $p->name = $type;
      $p->title = ucwords($type);
      $p->process = $this->wire('modules')->get('Process'.ucwords($type));
      $p->parent = $parent;
      $p->save();
    }
    return $p->id;
  }

	public function ___install() {
    $defaults = self::getDefaultConfig();
    //create an Event template
    $eventTemplate = $this->getTemplate($defaults['event_fields'], 'event');
    $this->eventTemplateID = $eventTemplate->id;
    //create an Equipment template
    $equipmentTemplate = $this->getTemplate($defaults['equipment_fields'], 'equipment');
    $this->equipmentTemplateID = $equipmentTemplate->id;
	  //create a page under Admin, give it the ProcessList process
    $schedulerPage = $this->getSchedulerPage();
	  //give that page two children, each with a process that inherits from ProcessPageType (ProcessEvents, and ProcessEquipment)
    $eventsPage = $this->getProcessPage("event", $schedulerPage);
    $equipmentPage = $this->getProcessPage("equipment", $schedulerPage);
	}

	public function ___uninstall() {
    //TO DO: Uninstall is totally worthless for some reason???
    $defaults = self::getDefaultConfig();
    //remove all event pages
    $events = $this->wire('pages')->find("template=event, include=all, check_access=0");
    foreach($events as $e){
      $this->wire('pages')->delete($e, true);
    }
    //remove all equipment pages
    $equipment = $this->wire('pages')->find("template=equipment, include=all, check_access=0");
    foreach ($equipment as $eq) {
      $this->wire('pages')->delete($eq, true);
    }
    //remove templates
    $eventsTemplate = $this->wire('templates')->get("name=event, include=all, check_access=0");
    if($eventsTemplate->id) $this->wire('templates')->delete();
    $equipmentTemplate = $this->wire('templates')->get("name=equipment, include=all, check_access=0");
    if($equipmentTemplate->id) $this->wire('templates')->delete();
    //remove fields
    $eventFields = $defaults['event_fields'];
    foreach ($eventFields as $field){
      $eventField = $this->wire('fields')->get("name=".$field.", include=all, check_access=0");
      if($eventField->id) $this->wire('fields')->delete($eventField);
    }
    $equipmentFields = $defaults['equipment_fields'];
    foreach ($equipmentFields as $field){
      $equipmentField = $this->wire('fields')->get("name=".$field.", include=all, check_access=0");
      if($equipmentField->id) $this->wire('fields')->delete($equipmentField);
    }
    //remove scheduler page
    $schedulerPage = $this->wire('pages')->get("name=scheduler, include=all, check_access=0");
    if($schedulerPage->id) $this->wire('pages')->delete($schedulerPage, true);
    parent::___uninstall();
	}

  public static function getModuleConfigInputfields(array $data) {
    $inputfields = new InputfieldWrapper();
    $defaults = self::getDefaultConfig();

    // ask for upload page url
    $field = wire('modules')->get('InputfieldText');
    $field->name = 'scheduler_page';
    $field->label = "Please provide the path to the page that should display the scheduler interface.";
    if(isset($data['scheduler_page'])){
      $field->value = $data['scheduler_page'];
    } else {
      $field->value = $defaults['scheduler_page'];
    }
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldText');
    $field->name = 'scheduler_format';
    $field->label = "The formatting for dates as displayed and received by the scheduler interface.";
    if(isset($data['scheduler_format'])){
      $field->value = $data['scheduler_format'];
    } else {
      $field->value = $defaults['scheduler_format'];
    }
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldInteger');
    $field->name = 'scheduler_allowed_hours_per_week';
    $field->label = "The number of hours per week users are allowed to reserve equipment from the lab.";
    if(isset($data['scheduler_allowed_hours_per_week'])){
      $field->value = $data['scheduler_allowed_hours_per_week'];
    } else {
      $field->value = $defaults['scheduler_allowed_hours_per_week'];
    }
    $inputfields->add($field);

    return $inputfields;
  }
}

?>