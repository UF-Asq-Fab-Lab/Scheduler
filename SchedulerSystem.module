<?php

    //TO DO: Make admin template file called scheduler-system-admin.php for the Module management page
    //template should hopefully provide the right context for rendering the pagetables such that they can be
    //viewed and edited. Give it a shot anyway. It may make the most sense to just edit through the page hierarchy

	class SchedulerSystem extends Process implements Module, ConfigurableModule {
		public static function getModuleInfo() {
            return array(
                'title' => 'AÂ² Fab Lab Scheduler System',
                'summary' => 'Makes an admin page to manage the scheduler. Provides a frontend interface for users to schedule events, reserve machinery.',
                'version' => 1,
                'autoload' => true,
                'page' => array(
                    'name' => 'scheduler-system-admin',
                    'title' => 'Scheduler System Admin',
                    'parent' => 'module'
                    ),
                'nav' => array(
                    array(
                        'url' => 'schedule/',
                        'name' => 'schedule',
                        'label' => 'Schedule'
                    ),
                    array(
                        'url' => 'equipment/',
                        'name' => 'equipment',
                        'label' => 'Equipment'
                    ),
                )
            );
        }

        public function __construct() {

        }

        public function init() {
           // parent::init();
            $class = "InputfieldPageTable";
            $url = $this->config->urls->$class;
            $path = $this->config->paths->$class;
            $info = $this->wire('modules')->getModuleInfo($this, array('verbose' => false));
            $version = (int) isset($info['version']) ? $info['version'] : 0;
            if(file_exists("$path$class.css")) $this->config->styles->add("$url$class.css?v=$version");
            if(file_exists("$path$class.js")) $this->config->scripts->add("$url$class.js?v=$version"); 
        	/*if(isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], $this->scheduler_page_url) !== false) {
           		$this->addHookAfter('TemplateFile::render', $this, 'addScheduleHandler');
            	$this->addHook('ProcessPageView::execute', $this, 'addCalendar');
        	}

       		$this->changeCronJobMailTo($this->email);*/
            //$this->getTableInterface();
        }

        public function ready () {
            $this->getTableInterface();
        }

        public function ___headline($headline) {
            parent::___headline("Scheduler System Admin");
        }

        public function getTableInterface(){
            $eventFields = self::getDefaultConfig()['event_fields'];
            $equipFields = self::getDefaultConfig()['equipment_fields'];

            $eventsTable = $this->getTable($eventFields, "event");
            $equipTable = $this->getTable($equipFields, "equipment");

            $adminTemplate = $this->getAdminTemplate();
            $adminPage = $this->pages->get('name=scheduler-system-admin');
            if($adminPage->template->name !== 'scheduler-system-admin'){
                $adminPage->setOutputFormatting(false);
                $adminPage->template = $adminTemplate;
                $adminPage->setOutputFormatting(true);
            }

            $inputfields = new InputfieldWrapper();
            $inputfields->add($this->getTableInputfield($eventsTable, $eventFields, "event"));
            $inputfields->add($this->getTableInputfield($equipTable, $equipFields, "equipment"));

            return $inputfields->render();
        }

        public static function getDefaultConfig() {
        	$rootpath = wire('config')->paths->root;
        	return array (
        			"handler_filepath" => $rootpath . "/site/templates/includes/scheduler_handler.php",
        			"scheduler_calendar_filepath" => $rootpath . "/site/templates/includes/scheduler_calendar.js",
        			"email" => "managerEmail@managerHost.com",
                    "scheduler_format" => "M-D-YYYY",
                    "scheduler_allowed_hours_per_week" => 6,

        			"scheduler_page_url" => "/path/to/scheduler",
        			"event_fields" => array(
                        'title' => 'FieldtypeText',
                        'start' => 'FieldtypeDatetime',
                        'end' => 'FieldtypeDatetime',
                        'user_name' => 'FieldtypeText',
                        'equipment_name' => 'FieldtypeText',
                        'color' => 'FieldtypeText',
                        'email' => 'FieldtypeEmail'
                    ),
                    "equipment_fields" => array(
                        'title' => 'FieldtypeText',
                        'equipment_name' => 'FieldtypeText',
                        'color' => 'FieldtypeText',
                        'available' => 'FieldtypeCheckbox',
                        'equipment_info' => 'FieldtypeTextarea'
                    )
        		);
    	}

    	public function changeCronJobMailTo($addr){
            $rootpath = wire('config')->paths->root;
            $crontabfile = $rootpath . "cron/crontab.txt";
            $newLine = "MAILTO=".$addr;
            $crontabLines = file($crontabfile);
            $oldLine = trim($crontabLines[0]);
            if(strcmp($newLine, $oldLine) != 0){
                $crontabLines[0] = $newLine."\n";
                $updated = implode($crontabLines, '');
                file_put_contents($crontabfile, $updated);
                exec("crontab ".$rootpath."cron/crontab.txt");
            }
        }

        public function initCronjob($rootpath){
            $crontabfile = $rootpath . "cron/crontab.txt";
            $crontabtxt = "";
            $this->message($crontabfile);
            $this->message(file_exists($crontabfile));
            if(!file_exists($crontabfile)){
                $crontabtxt .= "MAILTO=".$defaults['email']."\n";
                $crontabtxt .= "*/2 * * * * ". $rootpath."cron/clean_events.php > " . $rootpath . "cron/clean_events_logs"."\n";
                $this->message($crontabtxt);
                if(file_put_contents($crontabfile, $crontabtxt)){
                    $this->message("wrote file");
                } else {
                    $e = error_get_last();
                    $this->message("Error: " . $e['message']);
                }
                
            } else {
                $this->message("crontab.txt exists");
                $cronContent = file($crontabfile);
                $preset = false;
                foreach($cronContent as $line){
                    if(preg_match('/clean_events\.php/', $line)){
                        $this->message("events cleaning task already set");
                        $preset = true;
                    }
                }
                if(!$preset){
                    $this->message("uploads task not set, setting...");
                    array_push($cronContent, "*/2 * * * * ". $rootpath."cron/clean_events.php > " . $rootpath . "cron/clean_events_logs\n");
                    file_put_contents($crontabfile, $cronContent);
                }
            }
            $this->message("Launch cronjob: " . $rootpath."cron/crontab.txt");
            exec("crontab ".$rootpath."cron/crontab.txt");
        }

        public function removeCronjob($rootpath){
            $crontabfile = $rootpath . "cron/crontab.txt";

            $crontabtxt = file_get_contents($crontabfile);
            $removed = str_replace("*/2 * * * * ". $rootpath."cron/clean_uploads.php > " . $rootpath . "cron/clean_uploads_logs"."\n", '', $crontabtxt);
            $this->message($removed);
            file_put_contents($crontabfile, $removed);
        }

        public function __install() {
            parent::___install();
            
            /*$this->initCronjob(wire('config')->paths->root);
            $eventsModulePage = $this->getInstallPage(false, self::getDefaultConfig());
            $this->message("Installed to {$eventsModulePage->path}.");*/

        }

        public function ___execute() {
            /*$pagesUsingTemplate = $this->pages->find('template=scheduler_event, include=all');
            foreach ($pagesUsingTemplate as $key => $value) {
                $this->pages->delete($value);
            }*/
            
            
        }

        private function addScheduler(){
            //create js arrays and objects, attach to script attached to scheduler page markup
            //var events = [....];
            //var equipment = [....];
            //var config = {....};
            $jsonString = $this->getSchedulerJSON();

        }

        private function getTableInputfield($table, $fields, $type){
            $tid = $table->template_id;
            $pid = $table->parent_id;
            $rows = $this->pages->find("template=scheduler_".$type);
            $cols = '';
            foreach ($fields as $name => $t) {
                $cols.=$name."\n";
            }
            $inputfield = new InputfieldPageTable();
            $inputfield->set('name', "scheduler_".$type."_table");
            $inputfield->set('parent_id', $pid);
            $inputfield->set('template_id', $tid);
            $inputfield->set('columns', $cols);
            $inputfield->set('value', $rows);

            return $inputfield;
        }

        private function getAdminTemplate(){
            $t = $this->templates->get('name=scheduler-system-admin');
            if(!$t->id){
                $t = new Template();
                $t->name = 'scheduler-system-admin';
                $t->label = 'Scheduler System Admin';
                $t->fieldgroup = $this->getAdminFieldgroup();
                $t->tags = 'scheduler';
                $t->save();
            }
            return $t;
        }

        private function getAdminFieldgroup(){
            $eventFields = self::getDefaultConfig()['event_fields'];
            $equipFields = self::getDefaultConfig()['equipment_fields'];

            $fg = $this->fieldgroups->get('name=scheduler-system-admin');
            if(!$fg->id){
                $fg = new Fieldgroup();
                $fg->name = 'scheduler-system-admin';
                $fg->append($this->getTable($eventFields, "event"));
                $fg->append($this->getTable($equipFields, "equipment"));
                $fg->save();
            }
            return $fg;
        }

        private function getTable($fieldsArray, $type){
            $f = $this->fields->get("name=scheduler_".$type."_table");
            if(!$f->id){
                $f = new Field();
                $f->type = "FieldtypePageTable";
                $f->name = "scheduler_".$type."_table";
                $f->label = "Scheduler " . ucfirst($type) . " Table";
                $f->tags = 'scheduler';
                $f->parent_id = $this->pages->get('name=scheduler-system-admin')->id;
                foreach ($fieldsArray as $field => $t) {
                    $f->columns .= $field . "\n";
                }
                $f->template_id = $this->getTemplate($fieldsArray, $type)->id;
                $f->save();
            }
            return $f;   
        }

        private function getTemplate($fa, $type){
            $t = $this->templates->get("name=scheduler_".$type);
            if(!$t->id){
                $t = new Template();
                $t->name = "scheduler_".$type;
                $t->tags = "scheduler";
                $t->noChildren = 0;
                $t->noParents = 0;
                $t->fieldgroup = $this->getFieldgroup($fa, $type);
                $t->save();
            }
            return $t;
        }

        private function getFieldgroup($fieldsArray, $type){
            $fg = $this->fieldgroups->get("name=scheduler_".$type);
            if(!$fg->id){
                $fg = new Fieldgroup();
                $fg->name = "scheduler_".$type;
                foreach ($fieldsArray as $name => $kind) {
                    $fg->append($this->getField($name, $kind));
                }
                $fg->save();
            }
            
            return $fg;
        }

        private function getField($name, $type){
            $f = $this->fields->get("name=$name");
            if(!$f->id){
                $f = new Field();
                $f->name = $name;
                $f->type = $type;
                $f->label = ucwords(str_replace("_", " ", $name));
                $f->tags = "scheduler";
                $f->save();
            }
            return $f;
        }

        private function render($filename) {
            $template_file = new TemplateFile($filename);
        }

        public function __uninstall() {
            parent::___uninstall();

        }

    public function getSchedulerJSON(PageArray $epages, PageArray $qpages){
        $data = wire('modules')->getModuleConfigData('SchedulerSystem'); 

        $jsonString = 'var events = [';
        foreach ($epages as $event) {
            $jsonString .= '{"start" : ' . '"' . $event->start . '", ';
            $jsonString .= '"end" : ' . '"' . $event->end . '", ';
            $jsonString .= '"name" : ' . '"' . $event->username . '", ';
            $jsonString .= '"eqName" : ' . '"' . $event->equipmentName . '"}, ';
        }
        $jsonString = rtrim($jsonString, ", ");
        $jsonString .= "];\n";

        $jsonString .= 'var equipment = [';
        foreach ($qpages as $equipment){
            $jsonString .= '{"name" : ' . '"' . $equipment->name . '", ';
            $jsonString .= '"available" : ' . '"' . $equipment->available . '"}, ';
        }
        $jsonString = rtrim($jsonString, ", ");
        $jsonString .= "];\n";
        
        $jsonString .= 'var config = {"calendarFormat" : ' . '"' . $data['scheduler_format'] . '"' . '};';
        return $jsonString;
    }

    public static function getModuleConfigInputfields(array $data) {
    	$inputfields = new InputfieldWrapper();
         // ask for form markup
        $field = wire('modules')->get('InputfieldText');
        $field->name = 'scheduler_handler_filepath';
        $field->label = "Scheduler Handler Filepath";
        if(isset($data['scheduler_handler_filepath'])) $field->value = $data['scheduler_handler_filepath'];
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldEmail');
        $field->name = 'email';
        $field->label = "Scheduler Manager Email";
        if(isset($data['email'])) $field->value = $data['email'];
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'scheduler_format';
        $field->label = "Scheduler Date Format";
        if(isset($data['scheduler_format'])) $field->value = $data['scheduler_format'];
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldInteger');
        $field->name = 'scheduler_allowed_hours_per_week';
        $field->label = "Scheduler Hours Allowed per Week";
        if(isset($data['scheduler_allowed_hours_per_week'])) $field->value = $data['scheduler_allowed_hours_per_week'];
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldText');
        $field->name = 'scheduler_page_url';
        $field->label = "Frontend Page URL";
        if(isset($data['scheduler_page_url'])) $field->value = $data['scheduler_page_url'];
        $inputfields->add($field);

        
    	return $inputfields;
    } 
}

?>
